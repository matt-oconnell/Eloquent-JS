<h3>Find</h3>

<p>Find all restaurant that have the borough Manhattan.</p>
<pre>
db.restaurants.find( { "borough": "Manhattan" } )
</pre>

<p>Find all restaurants that have the address.zipcode value 10075. When using dot notation, quotes are necessary.</p>
<pre>
db.restaurants.find( { "address.zipcode": "10075" } )
</pre>

<p>Find all restaurants where the grade property inside of the grades array is = to B</p>
<pre>
db.restaurants.find( { "grades.grade": "B" } )
</pre>

<h3>Comparison Operators</h3>

<p>Find all with at least one embedded document with score > 30</p>
<pre>db.restaurants.find( { "grades.score": { $gt: 30 } } )</pre>

<p>Logical AND<br><em>Numbers must be in quotes</em></p>
<pre>db.restaurants.find( { "cuisine":"french", "address.zipcode": "10016" } )</pre>

<p>Logical OR</p>
<pre>
db.restaurants.find( { $or [ "cuisine":"french", "address.zipcode": "10016" ] } )
</pre>

<h3>Sorting</h3>
<p>Sort by borough in ascending order and address in descending</p>
<pre>
db.restaurants.find().sort( { "borough": 1, "address.zipcode": -1 } )
</pre>

<h3>Update</h3>
<p>After the following update, the modified document will only contain the _id field, name field, the address field. i.e. the document will not contain the restaurant_id, cuisine, grades, and the borough fields.</p>
<pre>
db.restaurants.update(
    { "name" : "Juni" },
    {
      $set: { "cuisine": "American (New)" },
      $currentDate: { "lastModified": true }
    }
)
</pre>
<p>If no document matches the update condition, the default behavior of the update method is to do nothing. By specifying the upsert option to true, the update operation either updates matching document(s) or inserts a new document if no matching document exists. In the MongoDB Manual, see update().</p>
<p>
In MongoDB, write operations are atomic on the level of a single document. If a single update operation modifies multiple documents of a collection, the operation can interleave with other write operations on that collection. In the MongoDB Manual, see Atomicity.</p>

<h3>Atomicity and Transactions</h3>
<p>In MongoDB, a write operation is atomic on the level of a single document, even if the operation modifies multiple embedded documents within a single document.</p>
<p>When a single write operation modifies multiple documents, the modification of each document is atomic, but the operation as a whole is not atomic and other operations may interleave. However, you can isolate a single write operation that affects multiple documents using the $isolated operator.</p>

<h3>$isolated Operator</h3>
<p>Using the $isolated operator, a write operation that affect multiple documents can prevent other processes from interleaving once the write operation modifies the first document. This ensures that no client sees the changes until the write operation completes or errors out.</p>

<p>Isolated write operation does not provide "all-or-nothing" atomicity. That is, an error during the write operation does not roll back all its changes that preceded the error.</p>

<p>For an example of an update operation that uses the $isolated operator, see $isolated. For an example of a remove operation that uses the $isolated operator, see Isolate Remove Operations.</p>

<h3>Transaction-Like Semantics</h3>

<p>Since a single document can contain multiple embedded documents, single-document atomicity is sufficient for many practical use cases. For cases where a sequence of write operations must operate as if in a single transaction, you can implement a two-phase commit in your application.
    <br>
However, two-phase commits can only offer transaction-like semantics. Using two-phase commit ensures data consistency, but it is possible for applications to return intermediate data during the two-phase commit or rollback.</p>

<h3>Concurrency Control</h3>
<p>Concurrency control allows multiple applications to run concurrently without causing data inconsistency or conflicts.
    <br>
An approach may be to create a unique index on a field (or fields) that should have only unique values (or unique combination of values) prevents duplicate insertions or updates that result in duplicate values. For examples of use cases, see update() and Unique Index and findAndModify() and Unique Index.
    <br>
Another approach is to specify the expected current value of a field in the query predicate for the write operations. For an example, see Update if Current.
    <br>
The two-phase commit pattern provides a variation where the query predicate includes the application identifier as well as the expected state of the data in the write operation.</p>

<h3>Remove</h3>
<p>Remove All Documents That Match a Condition</p>
<pre>db.restaurants.remove( { "borough": "Manhattan" } )</pre>

<h3>justOne Option</h3>
<pre>db.restaurants.remove( { "borough": "Queens" }, { justOne: true } )</pre>

<h3>Remove All</h3>
<pre>
db.restaurants.remove( { } )
</pre>

<h3>Drop a Collection</h3>
<p>The remove all operation only removes the documents from the collection. The collection itself, as well as any indexes for the collection, remain. To remove all documents from a collection, it may be more efficient to drop the entire collection, including the indexes, and then recreate the collection and rebuild the indexes. Use the drop() method to drop a collection, including any indexes.</p>

<pre>db.restaurants.drop()</pre>

<p></p>